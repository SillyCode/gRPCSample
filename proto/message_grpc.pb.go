// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: message.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Get_CarClient is the client API for Get_Car service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Get_CarClient interface {
	GetCar(ctx context.Context, in *CAR, opts ...grpc.CallOption) (*GetCarResponse, error)
}

type get_CarClient struct {
	cc grpc.ClientConnInterface
}

func NewGet_CarClient(cc grpc.ClientConnInterface) Get_CarClient {
	return &get_CarClient{cc}
}

func (c *get_CarClient) GetCar(ctx context.Context, in *CAR, opts ...grpc.CallOption) (*GetCarResponse, error) {
	out := new(GetCarResponse)
	err := c.cc.Invoke(ctx, "/main.Get_Car/GetCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Get_CarServer is the server API for Get_Car service.
// All implementations must embed UnimplementedGet_CarServer
// for forward compatibility
type Get_CarServer interface {
	GetCar(context.Context, *CAR) (*GetCarResponse, error)
	mustEmbedUnimplementedGet_CarServer()
}

// UnimplementedGet_CarServer must be embedded to have forward compatible implementations.
type UnimplementedGet_CarServer struct {
}

func (UnimplementedGet_CarServer) GetCar(context.Context, *CAR) (*GetCarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCar not implemented")
}
func (UnimplementedGet_CarServer) mustEmbedUnimplementedGet_CarServer() {}

// UnsafeGet_CarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Get_CarServer will
// result in compilation errors.
type UnsafeGet_CarServer interface {
	mustEmbedUnimplementedGet_CarServer()
}

func RegisterGet_CarServer(s grpc.ServiceRegistrar, srv Get_CarServer) {
	s.RegisterService(&Get_Car_ServiceDesc, srv)
}

func _Get_Car_GetCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAR)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Get_CarServer).GetCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Get_Car/GetCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Get_CarServer).GetCar(ctx, req.(*CAR))
	}
	return interceptor(ctx, in, info, handler)
}

// Get_Car_ServiceDesc is the grpc.ServiceDesc for Get_Car service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Get_Car_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Get_Car",
	HandlerType: (*Get_CarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCar",
			Handler:    _Get_Car_GetCar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
